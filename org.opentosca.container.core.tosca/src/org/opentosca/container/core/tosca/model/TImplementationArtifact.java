//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.4-2
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2013.07.10 at 12:45:26 PM CEST
//
// TOSCA version: TOSCA-v1.0-cs02.xsd
//

package org.opentosca.container.core.tosca.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;

import org.opentosca.container.core.tosca.StaticTOSCANamespaces;

/**
 * <p>
 * Java class for tImplementationArtifact complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="tImplementationArtifact">
 *   &lt;complexContent>
 *     &lt;extension base="{http://docs.oasis-open.org/tosca/ns/2011/12}tExtensibleElements">
 *       &lt;attribute name="interfaceName" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *       &lt;attribute name="operationName" type="{http://www.w3.org/2001/XMLSchema}NCName" />
 *       &lt;attribute name="artifactType" use="required" type="{http://www.w3.org/2001/XMLSchema}QName" />
 *       &lt;attribute name="artifactRef" type="{http://www.w3.org/2001/XMLSchema}QName" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tImplementationArtifact")
@XmlSeeAlso({org.opentosca.container.core.tosca.model.TImplementationArtifacts.ImplementationArtifact.class})
public class TImplementationArtifact extends TExtensibleElements {

	@XmlTransient
	protected String name;
	@XmlAttribute(name = "interfaceName")
	@XmlSchemaType(name = "anyURI")
	protected String interfaceName;
	@XmlAttribute(name = "operationName")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	@XmlSchemaType(name = "NCName")
	protected String operationName;
	@XmlAttribute(name = "artifactType", required = true)
	protected QName artifactType;
	@XmlAttribute(name = "artifactRef")
	protected QName artifactRef;


	/**
	 * Ruft den Wert der name-Eigenschaft ab.
	 *
	 * @return possible object is {@link String }
	 *
	 */
	public String getName() {
		if (null == this.name) {
			return this.getOtherAttributes().get(new QName(StaticTOSCANamespaces.nsToscaExtension, "name"));
		}

		return this.name;
	}

	/**
	 * Legt den Wert der name-Eigenschaft fest.
	 *
	 * @param value allowed object is {@link String }
	 *
	 */
	public void setName(final String value) {
		this.name = value;
	}

	/**
	 * Legt den Wert der name-Eigenschaft fest.
	 *
	 * @param attributeQName this QName has to be in the namespace for extending
	 *            TOSCA due OpenTOSCA and with the local part "name"
	 * @param the generated name should be unique and follow the rule: ownerName
	 *            (name of the owning NodeTypeImplementation or
	 *            RelationshipTypeImplementation) + _OpenTOSCA_IA_ + the number
	 *            of the implementation artifact in the list of implementation
	 *            artifacts of the owning *Implementation
	 *
	 */
	public void setName(final QName attributeQName, final String generatedName) {
		// set the new namespace for extension

		this.getOtherAttributes().put(attributeQName, generatedName);
		this.name = generatedName;
	}

	/**
	 * Gets the value of the interfaceName property.
	 *
	 * @return possible object is {@link String }
	 *
	 */
	public String getInterfaceName() {
		return this.interfaceName;
	}

	/**
	 * Sets the value of the interfaceName property.
	 *
	 * @param value allowed object is {@link String }
	 *
	 */
	public void setInterfaceName(final String value) {
		this.interfaceName = value;
	}

	/**
	 * Gets the value of the operationName property.
	 *
	 * @return possible object is {@link String }
	 *
	 */
	public String getOperationName() {
		return this.operationName;
	}

	/**
	 * Sets the value of the operationName property.
	 *
	 * @param value allowed object is {@link String }
	 *
	 */
	public void setOperationName(final String value) {
		this.operationName = value;
	}

	/**
	 * Gets the value of the artifactType property.
	 *
	 * @return possible object is {@link QName }
	 *
	 */
	public QName getArtifactType() {
		return this.artifactType;
	}

	/**
	 * Sets the value of the artifactType property.
	 *
	 * @param value allowed object is {@link QName }
	 *
	 */
	public void setArtifactType(final QName value) {
		this.artifactType = value;
	}

	/**
	 * Gets the value of the artifactRef property.
	 *
	 * @return possible object is {@link QName }
	 *
	 */
	public QName getArtifactRef() {
		return this.artifactRef;
	}

	/**
	 * Sets the value of the artifactRef property.
	 *
	 * @param value allowed object is {@link QName }
	 *
	 */
	public void setArtifactRef(final QName value) {
		this.artifactRef = value;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((this.artifactRef == null) ? 0 : this.artifactRef.hashCode());
		result = (prime * result) + ((this.artifactType == null) ? 0 : this.artifactType.hashCode());
		result = (prime * result) + ((this.interfaceName == null) ? 0 : this.interfaceName.hashCode());
		result = (prime * result) + ((this.operationName == null) ? 0 : this.operationName.hashCode());
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TImplementationArtifact)) {
			return false;
		}
		final TImplementationArtifact other = (TImplementationArtifact) obj;
		if (this.artifactRef == null) {
			if (other.artifactRef != null) {
				return false;
			}
		} else if (!this.artifactRef.equals(other.artifactRef)) {
			return false;
		}
		if (this.artifactType == null) {
			if (other.artifactType != null) {
				return false;
			}
		} else if (!this.artifactType.equals(other.artifactType)) {
			return false;
		}
		if (this.interfaceName == null) {
			if (other.interfaceName != null) {
				return false;
			}
		} else if (!this.interfaceName.equals(other.interfaceName)) {
			return false;
		}
		if (this.operationName == null) {
			if (other.operationName != null) {
				return false;
			}
		} else if (!this.operationName.equals(other.operationName)) {
			return false;
		}
		return true;
	}

}
